
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800172  00800172  000005e6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000144  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d5  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000247  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000471  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 37       	cpi	r26, 0x72	; 114
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e7       	ldi	r26, 0x72	; 114
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3e       	cpi	r26, 0xE0	; 224
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  c6:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_16>:
char ACObit, lastACObit ;
         
//**********************************************************
//timer 0 overflow ISR
ISR (TIMER0_COMPA_vect) 
begin      
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  //Decrement the time if not already zero
  if (time1>0)	--time1;
  dc:	80 91 cc 01 	lds	r24, 0x01CC
  e0:	90 91 cd 01 	lds	r25, 0x01CD
  e4:	89 2b       	or	r24, r25
  e6:	49 f0       	breq	.+18     	; 0xfa <__vector_16+0x2c>
  e8:	80 91 cc 01 	lds	r24, 0x01CC
  ec:	90 91 cd 01 	lds	r25, 0x01CD
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	90 93 cd 01 	sts	0x01CD, r25
  f6:	80 93 cc 01 	sts	0x01CC, r24
  if (time2>0)	--time2;
  fa:	80 91 d8 01 	lds	r24, 0x01D8
  fe:	90 91 d9 01 	lds	r25, 0x01D9
 102:	89 2b       	or	r24, r25
 104:	49 f0       	breq	.+18     	; 0x118 <__vector_16+0x4a>
 106:	80 91 d8 01 	lds	r24, 0x01D8
 10a:	90 91 d9 01 	lds	r25, 0x01D9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	90 93 d9 01 	sts	0x01D9, r25
 114:	80 93 d8 01 	sts	0x01D8, r24
  if (time3>0)	--time3;
 118:	80 91 d1 01 	lds	r24, 0x01D1
 11c:	90 91 d2 01 	lds	r25, 0x01D2
 120:	89 2b       	or	r24, r25
 122:	49 f0       	breq	.+18     	; 0x136 <__vector_16+0x68>
 124:	80 91 d1 01 	lds	r24, 0x01D1
 128:	90 91 d2 01 	lds	r25, 0x01D2
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	90 93 d2 01 	sts	0x01D2, r25
 132:	80 93 d1 01 	sts	0x01D1, r24
end  
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_12>:


//**********************************************************
// timer 1 capture ISR
ISR (TIMER1_CAPT_vect)
begin
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
    // read timer1 input capture register
    T1capture = ICR1 ; 
 156:	80 91 86 00 	lds	r24, 0x0086
 15a:	90 91 87 00 	lds	r25, 0x0087
 15e:	90 93 d0 01 	sts	0x01D0, r25
 162:	80 93 cf 01 	sts	0x01CF, r24
    // compute time between captures
    period =  T1capture - lastT1capture;
 166:	80 91 cf 01 	lds	r24, 0x01CF
 16a:	90 91 d0 01 	lds	r25, 0x01D0
 16e:	20 91 c8 01 	lds	r18, 0x01C8
 172:	30 91 c9 01 	lds	r19, 0x01C9
 176:	82 1b       	sub	r24, r18
 178:	93 0b       	sbc	r25, r19
 17a:	90 93 d4 01 	sts	0x01D4, r25
 17e:	80 93 d3 01 	sts	0x01D3, r24
    lastT1capture = T1capture ;
 182:	80 91 cf 01 	lds	r24, 0x01CF
 186:	90 91 d0 01 	lds	r25, 0x01D0
 18a:	90 93 c9 01 	sts	0x01C9, r25
 18e:	80 93 c8 01 	sts	0x01C8, r24
end
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <initialize>:
//Set it all up
void initialize(void)
begin

  //B.2 is output low and B.3 is input
  DDRB = 0x04;
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	84 b9       	out	0x04, r24	; 4
  PORTB = 0;
 1a8:	15 b8       	out	0x05, r1	; 5
           
  //set up timer  
  TIMSK0= (1<<OCIE0A);	//turn on timer 0 cmp match ISR 
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	90 93 6e 00 	sts	0x006E, r25
  OCR0A = 249;  		//set the compare reg to 250 time ticks
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	87 bd       	out	0x27, r24	; 39
  TCCR0B=3;				//set prescalar to divide by 1
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	85 bd       	out	0x25, r24	; 37
  // turn on clear-on-match
  TCCR0A= (1<<WGM01) ;
 1b8:	94 bd       	out	0x24, r25	; 36
  
  //set up timer1 for full speed and
  //capture an edge on analog comparator pin B.3 
  // Set capture to positive edge, full counting rate
  TCCR1B = (1<<ICES1) + 1; 
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	80 93 81 00 	sts	0x0081, r24
  // Turn on timer1 interrupt-on-capture
  TIMSK1 = (1<<ICIE1) ;
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	80 93 6f 00 	sts	0x006F, r24



  // Set analog comp to connect to timer capture input 
  // and turn on the band gap reference on the positive input  
  ACSR = (1<<ACBG) | (1<<ACIC) ; //0b01000100  ;
 1c6:	84 e4       	ldi	r24, 0x44	; 68
 1c8:	80 bf       	out	0x30, r24	; 48
  // Comparator negative input is B.3
  DDRB = 0 ;
 1ca:	14 b8       	out	0x04, r1	; 4
  // PORT D.7 is OC2A
  DDRD = (1<<PIND7) ;	
  */

  //init the task timer
  time1=t1;
 1cc:	88 ee       	ldi	r24, 0xE8	; 232
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	90 93 cd 01 	sts	0x01CD, r25
 1d4:	80 93 cc 01 	sts	0x01CC, r24
  time2=t2;
 1d8:	90 93 d9 01 	sts	0x01D9, r25
 1dc:	80 93 d8 01 	sts	0x01D8, r24
  time3=t3;
 1e0:	90 93 d2 01 	sts	0x01D2, r25
 1e4:	80 93 d1 01 	sts	0x01D1, r24
  //this is to let task1 know whether or not we have detected the presence of a capacitor
  tsk1m1 = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 cb 01 	sts	0x01CB, r25
 1f0:	80 93 ca 01 	sts	0x01CA, r24

  
      
  //init the UART -- uart_init() is in uart.c
  uart_init();
 1f4:	0e 94 57 01 	call	0x2ae	; 0x2ae <uart_init>
  stdout = stdin = stderr = &uart_str;
 1f8:	6c e5       	ldi	r22, 0x5C	; 92
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	70 93 df 01 	sts	0x01DF, r23
 200:	60 93 de 01 	sts	0x01DE, r22
 204:	70 93 db 01 	sts	0x01DB, r23
 208:	60 93 da 01 	sts	0x01DA, r22
 20c:	70 93 dd 01 	sts	0x01DD, r23
 210:	60 93 dc 01 	sts	0x01DC, r22
  fprintf(stdout,"Starting timers...\n\r");
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 43 02 	call	0x486	; 0x486 <fputs>
      
  //crank up the ISRs
  sei();
 21c:	78 94       	sei

end  
 21e:	08 95       	ret

00000220 <task2>:
end

void task2(void) 
begin  
    //reset the task timer
  if (tsk1m1 != 0)fprintf(stdout,"Finished discharging the capacitor, now charge!\n");
 220:	80 91 ca 01 	lds	r24, 0x01CA
 224:	90 91 cb 01 	lds	r25, 0x01CB
 228:	89 2b       	or	r24, r25
 22a:	41 f0       	breq	.+16     	; 0x23c <task2+0x1c>
 22c:	60 91 dc 01 	lds	r22, 0x01DC
 230:	70 91 dd 01 	lds	r23, 0x01DD
 234:	85 e1       	ldi	r24, 0x15	; 21
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 43 02 	call	0x486	; 0x486 <fputs>
 23c:	08 95       	ret

0000023e <task1>:
//Timed task subroutine
//Task 1
void task1(void) 
begin  
    //reset the task timer
  if (tsk1m1 != 0)
 23e:	80 91 ca 01 	lds	r24, 0x01CA
 242:	90 91 cb 01 	lds	r25, 0x01CB
 246:	89 2b       	or	r24, r25
 248:	41 f0       	breq	.+16     	; 0x25a <task1+0x1c>
  
  fprintf(stdout,"NO CAPACITA hardihar\n");
 24a:	60 91 dc 01 	lds	r22, 0x01DC
 24e:	70 91 dd 01 	lds	r23, 0x01DD
 252:	86 e4       	ldi	r24, 0x46	; 70
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 43 02 	call	0x486	; 0x486 <fputs>
 25a:	08 95       	ret

0000025c <main>:
end

//**********************************************************       
//Entry point and task scheduler loop
int main(void)
begin  
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
  initialize();
 262:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <initialize>
  begin

  while(time2>0)
  begin
  PORTB=0x00;
  time1=t1;
 266:	c8 ee       	ldi	r28, 0xE8	; 232
 268:	d3 e0       	ldi	r29, 0x03	; 3
  task2();//discharge the capacitor
  time1 =t1;
  while (time1>0)
  begin
  time2=t2;
  PORTB=0x04;
 26a:	14 e0       	ldi	r17, 0x04	; 4
 26c:	05 c0       	rjmp	.+10     	; 0x278 <main+0x1c>
  while(1)
  begin

  while(time2>0)
  begin
  PORTB=0x00;
 26e:	15 b8       	out	0x05, r1	; 5
  time1=t1;
 270:	d0 93 cd 01 	sts	0x01CD, r29
 274:	c0 93 cc 01 	sts	0x01CC, r28
  
  // main task scheduler loop 
  while(1)
  begin

  while(time2>0)
 278:	80 91 d8 01 	lds	r24, 0x01D8
 27c:	90 91 d9 01 	lds	r25, 0x01D9
 280:	89 2b       	or	r24, r25
 282:	a9 f7       	brne	.-22     	; 0x26e <main+0x12>
  begin
  PORTB=0x00;
  time1=t1;
  end
  task2();//discharge the capacitor
 284:	0e 94 10 01 	call	0x220	; 0x220 <task2>
  time1 =t1;
 288:	d0 93 cd 01 	sts	0x01CD, r29
 28c:	c0 93 cc 01 	sts	0x01CC, r28
 290:	05 c0       	rjmp	.+10     	; 0x29c <main+0x40>
  while (time1>0)
  begin
  time2=t2;
 292:	d0 93 d9 01 	sts	0x01D9, r29
 296:	c0 93 d8 01 	sts	0x01D8, r28
  PORTB=0x04;
 29a:	15 b9       	out	0x05, r17	; 5
  PORTB=0x00;
  time1=t1;
  end
  task2();//discharge the capacitor
  time1 =t1;
  while (time1>0)
 29c:	80 91 cc 01 	lds	r24, 0x01CC
 2a0:	90 91 cd 01 	lds	r25, 0x01CD
 2a4:	89 2b       	or	r24, r25
 2a6:	a9 f7       	brne	.-22     	; 0x292 <main+0x36>
  begin
  time2=t2;
  PORTB=0x04;
  end
  task1();
 2a8:	0e 94 1f 01 	call	0x23e	; 0x23e <task1>
 2ac:	e5 cf       	rjmp	.-54     	; 0x278 <main+0x1c>

000002ae <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 2b4:	88 e1       	ldi	r24, 0x18	; 24
 2b6:	80 93 c1 00 	sts	0x00C1, r24
}
 2ba:	08 95       	ret

000002bc <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 2bc:	1f 93       	push	r17
 2be:	18 2f       	mov	r17, r24

  if (c == '\a')
 2c0:	87 30       	cpi	r24, 0x07	; 7
 2c2:	49 f4       	brne	.+18     	; 0x2d6 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
 2c4:	60 91 de 01 	lds	r22, 0x01DE
 2c8:	70 91 df 01 	lds	r23, 0x01DF
 2cc:	8a e6       	ldi	r24, 0x6A	; 106
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 43 02 	call	0x486	; 0x486 <fputs>
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
 2d6:	8a 30       	cpi	r24, 0x0A	; 10
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <uart_putchar+0x24>
    uart_putchar('\r', stream);
 2da:	8d e0       	ldi	r24, 0x0D	; 13
 2dc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	85 ff       	sbrs	r24, 5
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <uart_putchar+0x24>
  UDR0 = c;
 2e8:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 302:	80 91 72 01 	lds	r24, 0x0172
 306:	90 91 73 01 	lds	r25, 0x0173
 30a:	89 2b       	or	r24, r25
 30c:	09 f0       	breq	.+2      	; 0x310 <uart_getchar+0x1c>
 30e:	9f c0       	rjmp	.+318    	; 0x44e <uart_getchar+0x15a>
 310:	04 e7       	ldi	r16, 0x74	; 116
 312:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 314:	80 91 c0 00 	lds	r24, 0x00C0
 318:	87 ff       	sbrs	r24, 7
 31a:	fc cf       	rjmp	.-8      	; 0x314 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 31c:	80 91 c0 00 	lds	r24, 0x00C0
 320:	84 ff       	sbrs	r24, 4
 322:	03 c0       	rjmp	.+6      	; 0x32a <uart_getchar+0x36>
 324:	2e ef       	ldi	r18, 0xFE	; 254
 326:	3f ef       	ldi	r19, 0xFF	; 255
 328:	a6 c0       	rjmp	.+332    	; 0x476 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 32a:	80 91 c0 00 	lds	r24, 0x00C0
 32e:	83 fd       	sbrc	r24, 3
 330:	a0 c0       	rjmp	.+320    	; 0x472 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
 332:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 336:	9d 30       	cpi	r25, 0x0D	; 13
 338:	11 f0       	breq	.+4      	; 0x33e <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
 33a:	9a 30       	cpi	r25, 0x0A	; 10
 33c:	69 f4       	brne	.+26     	; 0x358 <uart_getchar+0x64>
	  {
	    *cp = c;
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	f8 01       	movw	r30, r16
 342:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 344:	b7 01       	movw	r22, r14
 346:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
	    rxp = b;
 34a:	84 e7       	ldi	r24, 0x74	; 116
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	90 93 73 01 	sts	0x0173, r25
 352:	80 93 72 01 	sts	0x0172, r24
 356:	7b c0       	rjmp	.+246    	; 0x44e <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
 358:	99 30       	cpi	r25, 0x09	; 9
 35a:	09 f4       	brne	.+2      	; 0x35e <uart_getchar+0x6a>
 35c:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 35e:	89 2f       	mov	r24, r25
 360:	80 52       	subi	r24, 0x20	; 32
 362:	8f 35       	cpi	r24, 0x5F	; 95
 364:	10 f0       	brcs	.+4      	; 0x36a <uart_getchar+0x76>
 366:	90 3a       	cpi	r25, 0xA0	; 160
 368:	70 f0       	brcs	.+28     	; 0x386 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	03 3c       	cpi	r16, 0xC3	; 195
 36e:	1f 07       	cpc	r17, r31
 370:	11 f4       	brne	.+4      	; 0x376 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
 372:	87 e0       	ldi	r24, 0x07	; 7
 374:	04 c0       	rjmp	.+8      	; 0x37e <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
 376:	f8 01       	movw	r30, r16
 378:	91 93       	st	Z+, r25
 37a:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
 37c:	89 2f       	mov	r24, r25
 37e:	b7 01       	movw	r22, r14
 380:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
 384:	c7 cf       	rjmp	.-114    	; 0x314 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
 386:	92 31       	cpi	r25, 0x12	; 18
 388:	39 f1       	breq	.+78     	; 0x3d8 <uart_getchar+0xe4>
 38a:	93 31       	cpi	r25, 0x13	; 19
 38c:	38 f4       	brcc	.+14     	; 0x39c <uart_getchar+0xa8>
 38e:	93 30       	cpi	r25, 0x03	; 3
 390:	09 f4       	brne	.+2      	; 0x394 <uart_getchar+0xa0>
 392:	6f c0       	rjmp	.+222    	; 0x472 <uart_getchar+0x17e>
 394:	98 30       	cpi	r25, 0x08	; 8
 396:	09 f0       	breq	.+2      	; 0x39a <uart_getchar+0xa6>
 398:	bd cf       	rjmp	.-134    	; 0x314 <uart_getchar+0x20>
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <uart_getchar+0xba>
 39c:	97 31       	cpi	r25, 0x17	; 23
 39e:	09 f4       	brne	.+2      	; 0x3a2 <uart_getchar+0xae>
 3a0:	4b c0       	rjmp	.+150    	; 0x438 <uart_getchar+0x144>
 3a2:	9f 37       	cpi	r25, 0x7F	; 127
 3a4:	21 f0       	breq	.+8      	; 0x3ae <uart_getchar+0xba>
 3a6:	95 31       	cpi	r25, 0x15	; 21
 3a8:	09 f0       	breq	.+2      	; 0x3ac <uart_getchar+0xb8>
 3aa:	b4 cf       	rjmp	.-152    	; 0x314 <uart_getchar+0x20>
 3ac:	32 c0       	rjmp	.+100    	; 0x412 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	04 37       	cpi	r16, 0x74	; 116
 3b2:	1f 07       	cpc	r17, r31
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <uart_getchar+0xc4>
 3b6:	08 f4       	brcc	.+2      	; 0x3ba <uart_getchar+0xc6>
 3b8:	ad cf       	rjmp	.-166    	; 0x314 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	b7 01       	movw	r22, r14
 3be:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar(' ', stream);
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	b7 01       	movw	r22, r14
 3c6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar('\b', stream);
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	b7 01       	movw	r22, r14
 3ce:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		cp--;
 3d2:	01 50       	subi	r16, 0x01	; 1
 3d4:	10 40       	sbci	r17, 0x00	; 0
 3d6:	9e cf       	rjmp	.-196    	; 0x314 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 3d8:	8d e0       	ldi	r24, 0x0D	; 13
 3da:	b7 01       	movw	r22, r14
 3dc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
 3e0:	c4 e7       	ldi	r28, 0x74	; 116
 3e2:	d1 e0       	ldi	r29, 0x01	; 1
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
 3e6:	89 91       	ld	r24, Y+
 3e8:	b7 01       	movw	r22, r14
 3ea:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 3ee:	c0 17       	cp	r28, r16
 3f0:	d1 07       	cpc	r29, r17
 3f2:	c8 f3       	brcs	.-14     	; 0x3e6 <uart_getchar+0xf2>
 3f4:	8f cf       	rjmp	.-226    	; 0x314 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	b7 01       	movw	r22, r14
 3fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar(' ', stream);
 3fe:	80 e2       	ldi	r24, 0x20	; 32
 400:	b7 01       	movw	r22, r14
 402:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar('\b', stream);
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	b7 01       	movw	r22, r14
 40a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		cp--;
 40e:	01 50       	subi	r16, 0x01	; 1
 410:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	04 37       	cpi	r16, 0x74	; 116
 416:	18 07       	cpc	r17, r24
 418:	09 f0       	breq	.+2      	; 0x41c <uart_getchar+0x128>
 41a:	68 f7       	brcc	.-38     	; 0x3f6 <uart_getchar+0x102>
 41c:	7b cf       	rjmp	.-266    	; 0x314 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	b7 01       	movw	r22, r14
 422:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar(' ', stream);
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	b7 01       	movw	r22, r14
 42a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
		uart_putchar('\b', stream);
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	b7 01       	movw	r22, r14
 432:	0e 94 5e 01 	call	0x2bc	; 0x2bc <uart_putchar>
 436:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 438:	e1 e0       	ldi	r30, 0x01	; 1
 43a:	04 37       	cpi	r16, 0x74	; 116
 43c:	1e 07       	cpc	r17, r30
 43e:	09 f0       	breq	.+2      	; 0x442 <uart_getchar+0x14e>
 440:	08 f4       	brcc	.+2      	; 0x444 <uart_getchar+0x150>
 442:	68 cf       	rjmp	.-304    	; 0x314 <uart_getchar+0x20>
 444:	e8 01       	movw	r28, r16
 446:	8a 91       	ld	r24, -Y
 448:	80 32       	cpi	r24, 0x20	; 32
 44a:	49 f7       	brne	.-46     	; 0x41e <uart_getchar+0x12a>
 44c:	63 cf       	rjmp	.-314    	; 0x314 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 44e:	e0 91 72 01 	lds	r30, 0x0172
 452:	f0 91 73 01 	lds	r31, 0x0173
 456:	81 91       	ld	r24, Z+
 458:	f0 93 73 01 	sts	0x0173, r31
 45c:	e0 93 72 01 	sts	0x0172, r30
  if (c == '\n')
 460:	8a 30       	cpi	r24, 0x0A	; 10
 462:	21 f4       	brne	.+8      	; 0x46c <uart_getchar+0x178>
    rxp = 0;
 464:	10 92 73 01 	sts	0x0173, r1
 468:	10 92 72 01 	sts	0x0172, r1

  return c;
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <uart_getchar+0x182>
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	3f ef       	ldi	r19, 0xFF	; 255
}
 476:	c9 01       	movw	r24, r18
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <fputs>:
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	7c 01       	movw	r14, r24
 494:	8b 01       	movw	r16, r22
 496:	db 01       	movw	r26, r22
 498:	13 96       	adiw	r26, 0x03	; 3
 49a:	8c 91       	ld	r24, X
 49c:	81 fd       	sbrc	r24, 1
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <fputs+0x20>
 4a0:	cf ef       	ldi	r28, 0xFF	; 255
 4a2:	df ef       	ldi	r29, 0xFF	; 255
 4a4:	13 c0       	rjmp	.+38     	; 0x4cc <fputs+0x46>
 4a6:	c0 e0       	ldi	r28, 0x00	; 0
 4a8:	d0 e0       	ldi	r29, 0x00	; 0
 4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <fputs+0x3c>
 4ac:	d8 01       	movw	r26, r16
 4ae:	18 96       	adiw	r26, 0x08	; 8
 4b0:	ed 91       	ld	r30, X+
 4b2:	fc 91       	ld	r31, X
 4b4:	19 97       	sbiw	r26, 0x09	; 9
 4b6:	b8 01       	movw	r22, r16
 4b8:	09 95       	icall
 4ba:	89 2b       	or	r24, r25
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <fputs+0x3c>
 4be:	cf ef       	ldi	r28, 0xFF	; 255
 4c0:	df ef       	ldi	r29, 0xFF	; 255
 4c2:	f7 01       	movw	r30, r14
 4c4:	81 91       	ld	r24, Z+
 4c6:	7f 01       	movw	r14, r30
 4c8:	88 23       	and	r24, r24
 4ca:	81 f7       	brne	.-32     	; 0x4ac <fputs+0x26>
 4cc:	ce 01       	movw	r24, r28
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
